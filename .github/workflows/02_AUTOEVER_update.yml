name: 02_ÌòÑÎåÄÏò§ÌÜ†ÏóêÎ≤Ñ_DART Update (XBRL v4)

on:
  schedule:
    - cron: '15 0 31 3 *'        # 3Ïõî 31Ïùº Ïò§Ï†Ñ 9Ïãú 15Î∂Ñ (UTC+9)
    - cron: '15 0 17 5,8,11 *'   # 5Ïõî, 8Ïõî, 11Ïõî 17Ïùº Ïò§Ï†Ñ 9Ïãú 15Î∂Ñ (UTC+9)
  workflow_dispatch:             # ÏàòÎèô Ïã§Ìñâ Í∞ÄÎä•
    inputs:
      debug_mode:
        description: 'ÎîîÎ≤ÑÍ∑∏ Î™®Îìú ÌôúÏÑ±Ìôî'
        required: false
        default: 'false'
        type: boolean

jobs:
  update-dart-reports:
    runs-on: ubuntu-latest
    timeout-minutes: 45          # XBRL Ï≤òÎ¶¨ ÏãúÍ∞Ñ Í≥†Î†§ÌïòÏó¨ Ï¶ùÍ∞Ä
    
    env:
      DART_API_KEY: ${{ secrets.DART_API_KEY }}
      GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
      AUTOEVER_SPREADSHEET_ID: ${{ secrets.AUTOEVER_SPREADSHEET_ID }}
      TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
      TELEGRAM_CHANNEL_ID: ${{ secrets.TELEGRAM_CHANNEL_ID }}
      DEBUG_MODE: ${{ github.event.inputs.debug_mode || 'false' }}
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'   # ÏµúÏã† Python Î≤ÑÏ†ÑÏúºÎ°ú ÏóÖÎç∞Ïù¥Ìä∏
          cache: 'pip'
          
      - name: Cache Python dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          
      - name: Verify environment variables
        run: |
          echo "üîç ÌôòÍ≤ΩÎ≥ÄÏàò ÌôïÏù∏ Ï§ë..."
          required_vars=("DART_API_KEY" "GOOGLE_CREDENTIALS" "AUTOEVER_SPREADSHEET_ID" "TELEGRAM_BOT_TOKEN" "TELEGRAM_CHANNEL_ID")
          
          for var in "${required_vars[@]}"; do
            if [ -z "${!var}" ]; then
              echo "‚ùå Error: $var is not set"
              exit 1
            else
              echo "‚úÖ $var exists: true"
            fi
          done
          
          echo "üîß Debug mode: $DEBUG_MODE"
          echo "üèÉ Runner OS: ${{ runner.os }}"
          echo "üêç Python version: $(python --version)"
          
      - name: Create log directory
        run: |
          mkdir -p logs
          echo "üìÅ Î°úÍ∑∏ ÎîîÎ†âÌÜ†Î¶¨ ÏÉùÏÑ± ÏôÑÎ£å"
          
      - name: Run XBRL DART update script
        id: update-dart
        run: |
          echo "üöÄ XBRL Í∏∞Î∞ò DART ÏóÖÎç∞Ïù¥Ìä∏ ÏãúÏûë..."
          
          if [ "$DEBUG_MODE" = "true" ]; then
            echo "üîß ÎîîÎ≤ÑÍ∑∏ Î™®ÎìúÎ°ú Ïã§Ìñâ"
            python -u 307950_dart_update_xbrl.py 2>&1 | tee logs/dart_update.log
          else
            python 307950_dart_update_xbrl.py 2>&1 | tee logs/dart_update.log
          fi
          
          # Ïã§Ìñâ Í≤∞Í≥º ÌôïÏù∏
          if [ ${PIPESTATUS[0]} -eq 0 ]; then
            echo "‚úÖ DART ÏóÖÎç∞Ïù¥Ìä∏ ÏÑ±Í≥µ"
            echo "success=true" >> $GITHUB_OUTPUT
          else
            echo "‚ùå DART ÏóÖÎç∞Ïù¥Ìä∏ Ïã§Ìå®"
            echo "success=false" >> $GITHUB_OUTPUT
            exit 1
          fi
        continue-on-error: true
        
      - name: Check execution results
        run: |
          echo "üìä Ïã§Ìñâ Í≤∞Í≥º ÏöîÏïΩ:"
          echo "- ÏÑ±Í≥µ Ïó¨Î∂Ä: ${{ steps.update-dart.outputs.success }}"
          echo "- Ï¢ÖÎ£å ÏΩîÎìú: ${{ steps.update-dart.outcome }}"
          
          if [ -f "logs/dart_update.log" ]; then
            echo "- Î°úÍ∑∏ ÌååÏùº ÌÅ¨Í∏∞: $(du -h logs/dart_update.log | cut -f1)"
            echo "- ÎßàÏßÄÎßâ 10Ï§Ñ:"
            tail -10 logs/dart_update.log
          fi
          
      - name: Upload execution logs
        if: always()  # ÏÑ±Í≥µ/Ïã§Ìå®ÏôÄ Í¥ÄÍ≥ÑÏóÜÏù¥ Ìï≠ÏÉÅ ÏóÖÎ°úÎìú
        uses: actions/upload-artifact@v4
        with:
          name: dart-update-logs-${{ github.run_number }}
          path: |
            logs/
            *.log
            *.txt
            *.json
          retention-days: 30
          compression-level: 6
          
      - name: Upload failure logs (detailed)
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: dart-failure-debug-${{ github.run_number }}
          path: |
            logs/
            *.log
            *.txt
            *.json
            *.xml
            /tmp/*.log
          retention-days: 7
          compression-level: 9
          if-no-files-found: warn
          
      - name: Clean up sensitive data
        if: always()
        run: |
          echo "üßπ ÎØºÍ∞êÌïú Îç∞Ïù¥ÌÑ∞ Ï†ïÎ¶¨ Ï§ë..."
          
          # ÏûÑÏãú ÌååÏùºÎì§ ÏÇ≠Ï†ú
          find . -name "*.tmp" -delete 2>/dev/null || true
          find . -name "*credentials*" -delete 2>/dev/null || true
          find /tmp -name "*dart*" -delete 2>/dev/null || true
          
          # ÌôòÍ≤ΩÎ≥ÄÏàò Ï†ïÎ¶¨
          unset DART_API_KEY
          unset GOOGLE_CREDENTIALS
          unset TELEGRAM_BOT_TOKEN
          
          echo "‚úÖ Ï†ïÎ¶¨ ÏôÑÎ£å"
          
      - name: Summary report
        if: always()
        run: |
          echo "## üìã DART ÏóÖÎç∞Ïù¥Ìä∏ Ïã§Ìñâ ÏöîÏïΩ" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Ìï≠Î™© | Í∞í |" >> $GITHUB_STEP_SUMMARY
          echo "|------|-----|" >> $GITHUB_STEP_SUMMARY
          echo "| üè¢ ÌöåÏÇ¨ | ÌòÑÎåÄÏò§ÌÜ†ÏóêÎ≤Ñ (307950) |" >> $GITHUB_STEP_SUMMARY
          echo "| üìÖ Ïã§Ìñâ ÏãúÍ∞Ñ | $(date '+%Y-%m-%d %H:%M:%S UTC') |" >> $GITHUB_STEP_SUMMARY
          echo "| üîÑ Ïã§Ìñâ Î≤àÌò∏ | ${{ github.run_number }} |" >> $GITHUB_STEP_SUMMARY
          echo "| ‚úÖ ÏÑ±Í≥µ Ïó¨Î∂Ä | ${{ steps.update-dart.outputs.success || 'false' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| üîß ÎîîÎ≤ÑÍ∑∏ Î™®Îìú | $DEBUG_MODE |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ steps.update-dart.outcome }}" = "success" ]; then
            echo "### ‚úÖ ÏóÖÎç∞Ïù¥Ìä∏ ÏÑ±Í≥µ" >> $GITHUB_STEP_SUMMARY
            echo "XBRL Í∏∞Î∞ò DART Îç∞Ïù¥ÌÑ∞ ÏóÖÎç∞Ïù¥Ìä∏Í∞Ä ÏÑ±Í≥µÏ†ÅÏúºÎ°ú ÏôÑÎ£åÎêòÏóàÏäµÎãàÎã§." >> $GITHUB_STEP_SUMMARY
          else
            echo "### ‚ùå ÏóÖÎç∞Ïù¥Ìä∏ Ïã§Ìå®" >> $GITHUB_STEP_SUMMARY
            echo "DART Îç∞Ïù¥ÌÑ∞ ÏóÖÎç∞Ïù¥Ìä∏ Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§. Î°úÍ∑∏Î•º ÌôïÏù∏Ìï¥Ï£ºÏÑ∏Ïöî." >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üìÅ ÏïÑÌã∞Ìå©Ìä∏" >> $GITHUB_STEP_SUMMARY
          echo "- Ïã§Ìñâ Î°úÍ∑∏: \`dart-update-logs-${{ github.run_number }}\`" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ steps.update-dart.outcome }}" != "success" ]; then
            echo "- Ïã§Ìå® ÏÉÅÏÑ∏ Î°úÍ∑∏: \`dart-failure-debug-${{ github.run_number }}\`" >> $GITHUB_STEP_SUMMARY
          fi

  notify-completion:
    runs-on: ubuntu-latest
    needs: update-dart-reports
    if: always()
    
    steps:
      - name: Send completion notification
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHANNEL_ID: ${{ secrets.TELEGRAM_CHANNEL_ID }}
        run: |
          if [ -n "$TELEGRAM_BOT_TOKEN" ] && [ -n "$TELEGRAM_CHANNEL_ID" ]; then
            
            if [ "${{ needs.update-dart-reports.result }}" = "success" ]; then
              STATUS_EMOJI="‚úÖ"
              STATUS_TEXT="ÏÑ±Í≥µ"
            else
              STATUS_EMOJI="‚ùå"
              STATUS_TEXT="Ïã§Ìå®"
            fi
            
            MESSAGE=$(cat << EOF
          ü§ñ GitHub Actions ÏïåÎ¶º
          
          üìã ÏûëÏóÖ: DART ÏóÖÎç∞Ïù¥Ìä∏ (XBRL)
          üè¢ ÌöåÏÇ¨: ÌòÑÎåÄÏò§ÌÜ†ÏóêÎ≤Ñ (307950)
          üìÖ Ïã§Ìñâ ÏãúÍ∞Ñ: $(date '+%Y-%m-%d %H:%M:%S UTC')
          ${STATUS_EMOJI} Í≤∞Í≥º: ${STATUS_TEXT}
          üîó ÏõåÌÅ¨ÌîåÎ°ú: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          
          #DART #ÌòÑÎåÄÏò§ÌÜ†ÏóêÎ≤Ñ #ÏûêÎèôÌôî
          EOF
          )
            
            curl -s -X POST "https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage" \
              -d "chat_id=${TELEGRAM_CHANNEL_ID}" \
              -d "text=${MESSAGE}" \
              -d "parse_mode=HTML"
              
            echo "üì± ÌÖîÎ†àÍ∑∏Îû® ÏïåÎ¶º Ï†ÑÏÜ° ÏôÑÎ£å"
          else
            echo "‚ö†Ô∏è ÌÖîÎ†àÍ∑∏Îû® ÏÑ§Ï†ïÏù¥ ÏóÜÏñ¥ ÏïåÎ¶ºÏùÑ Í±¥ÎÑàÎúÅÎãàÎã§"
          fi
