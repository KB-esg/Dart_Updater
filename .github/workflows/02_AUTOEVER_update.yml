name: DART Update (XBRL v5)

on:
  schedule:
    - cron: '15 0 31 3 *'        # 3월 31일 오전 9시 15분 (UTC+9)
    - cron: '15 0 17 5,8,11 *'   # 5월, 8월, 11월 17일 오전 9시 15분 (UTC+9)
  workflow_dispatch:             # 수동 실행 가능
    inputs:
      debug_mode:
        description: '디버그 모드 활성화'
        required: false
        default: 'false'
        type: boolean
      custom_date_range:
        description: '사용자 정의 날짜 범위 사용'
        required: false
        default: 'false'
        type: boolean
      start_date:
        description: '시작일 (YYYYMMDD 형식, 예: 20240101)'
        required: false
        default: ''
        type: string
      end_date:
        description: '종료일 (YYYYMMDD 형식, 예: 20241231)'
        required: false
        default: ''
        type: string
      company_code:
        description: '종목코드 (선택적, 기본값: 환경변수 사용)'
        required: false
        default: ''
        type: string

jobs:
  update-dart-reports:
    runs-on: ubuntu-latest
    timeout-minutes: 45          # XBRL 처리 시간 고려하여 증가
    
    # 기본 종목 설정 (환경변수 또는 직접 설정)
    # GitHub Secrets에서 관리하거나 여기에 직접 설정 가능
    env:
      # DART API 및 인증 정보
      DART_API_KEY: ${{ secrets.DART_API_KEY }}
      GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
      TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
      TELEGRAM_CHANNEL_ID: ${{ secrets.TELEGRAM_CHANNEL_ID }}
      
      # 종목별 설정 (여러 종목 관리 시 matrix 사용 권장)
      # 현대오토에버 설정
      COMPANY_CORP_CODE: ${{ github.event.inputs.company_code || '307950' }}
      COMPANY_NAME: '현대오토에버'
      COMPANY_SPREADSHEET_VAR: 'AUTOEVER_SPREADSHEET_ID'
      AUTOEVER_SPREADSHEET_ID: ${{ secrets.AUTOEVER_SPREADSHEET_ID }}
      
      # 실행 옵션
      DEBUG_MODE: ${{ github.event.inputs.debug_mode || 'false' }}
      CUSTOM_DATE_RANGE: ${{ github.event.inputs.custom_date_range || 'false' }}
      MANUAL_START_DATE: ${{ github.event.inputs.start_date }}
      MANUAL_END_DATE: ${{ github.event.inputs.end_date }}
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'   # 최신 Python 버전으로 업데이트
          cache: 'pip'
          
      - name: Cache Python dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          
          # requirements.txt가 있으면 사용, 없으면 직접 설치
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          else
            pip install gspread google-auth google-auth-oauthlib google-auth-httplib2
            pip install opendartreader beautifulsoup4 pandas requests
            pip install openpyxl lxml
            # HTML 파서 (선택적)
            pip install html-table-parser || pip install html-table-parser-python3 || true
          fi
          
      - name: Verify environment variables
        run: |
          echo "🔍 환경변수 확인 중..."
          echo "🏢 처리할 종목: $COMPANY_NAME ($COMPANY_CORP_CODE)"
          
          required_vars=("DART_API_KEY" "GOOGLE_CREDENTIALS" "$COMPANY_SPREADSHEET_VAR" "TELEGRAM_BOT_TOKEN" "TELEGRAM_CHANNEL_ID")
          
          for var in "${required_vars[@]}"; do
            if [ -n "${!var}" ]; then
              value="${!var}"
              length=${#value}
              
              if [ $length -gt 4 ]; then
                if [ $length -gt 20 ]; then
                  # 긴 값: 처음 6자리 + ... + 마지막 4자리 중 앞 2자리 + **
                  masked="${value:0:6}...${value: -4:-2}**"
                else
                  # 짧은 값: 마지막 2자리만 **로 가림
                  masked="${value:0:-2}**"
                fi
                echo "✅ $var: $masked (길이: $length)"
              else
                echo "⚠️ $var: 값이 너무 짧음 (길이: $length)"
              fi
            else
              echo "❌ Error: $var is not set"
              exit 1
            fi
          done
          
          echo "🔧 Debug mode: $DEBUG_MODE"
          echo "📅 Custom date range: $CUSTOM_DATE_RANGE"
          if [ "$CUSTOM_DATE_RANGE" = "true" ]; then
            echo "📅 Start date: $MANUAL_START_DATE"
            echo "📅 End date: $MANUAL_END_DATE"
          fi
          echo "🏃 Runner OS: ${{ runner.os }}"
          echo "🐍 Python version: $(python --version)"
          
      - name: Validate date inputs
        if: github.event.inputs.custom_date_range == 'true'
        run: |
          echo "📅 날짜 입력값 검증 중..."
          
          start_date="${{ github.event.inputs.start_date }}"
          end_date="${{ github.event.inputs.end_date }}"
          
          if [ -z "$start_date" ] || [ -z "$end_date" ]; then
            echo "❌ 사용자 정의 날짜 범위를 선택했지만 시작일 또는 종료일이 비어있습니다."
            echo "💡 시작일과 종료일을 모두 YYYYMMDD 형식으로 입력해주세요."
            exit 1
          fi
          
          # 날짜 형식 검증
          if ! [[ $start_date =~ ^[0-9]{8}$ ]] || ! [[ $end_date =~ ^[0-9]{8}$ ]]; then
            echo "❌ 날짜 형식이 올바르지 않습니다. YYYYMMDD 형식으로 입력해주세요."
            echo "예: 20240101, 20241231"
            exit 1
          fi
          
          # 날짜 순서 검증
          if [ "$start_date" -gt "$end_date" ]; then
            echo "❌ 시작일이 종료일보다 늦습니다."
            echo "시작일: $start_date, 종료일: $end_date"
            exit 1
          fi
          
          # 날짜 범위 계산 (간단한 계산)
          start_year=${start_date:0:4}
          start_month=${start_date:4:2}
          start_day=${start_date:6:2}
          end_year=${end_date:0:4}
          end_month=${end_date:4:2}
          end_day=${end_date:6:2}
          
          # 2년 초과 검증 (대략적)
          year_diff=$((end_year - start_year))
          if [ $year_diff -gt 2 ]; then
            echo "❌ 날짜 범위가 너무 깁니다 (2년 초과). 더 짧은 기간으로 설정해주세요."
            exit 1
          fi
          
          echo "✅ 날짜 검증 완료"
          echo "📅 처리 범위: $start_date ~ $end_date"
          echo "📅 기간: 약 $year_diff년"
          
      - name: Create log directory
        run: |
          mkdir -p logs
          echo "📁 로그 디렉토리 생성 완료"
          
      - name: Run XBRL DART update script
        id: update-dart
        run: |
          echo "🚀 XBRL 기반 DART 업데이트 시작..."
          echo "🏢 종목: $COMPANY_NAME ($COMPANY_CORP_CODE)"
          
          if [ "$DEBUG_MODE" = "true" ]; then
            echo "🔧 디버그 모드로 실행"
            python -u Dart_update.py 2>&1 | tee logs/dart_update.log
          else
            python Dart_update.py 2>&1 | tee logs/dart_update.log
          fi
          
          # 실행 결과 확인
          if [ ${PIPESTATUS[0]} -eq 0 ]; then
            echo "✅ DART 업데이트 성공"
            echo "success=true" >> $GITHUB_OUTPUT
          else
            echo "❌ DART 업데이트 실패"
            echo "success=false" >> $GITHUB_OUTPUT
            exit 1
          fi
        continue-on-error: true
        
      - name: Check execution results
        run: |
          echo "📊 실행 결과 요약:"
          echo "- 성공 여부: ${{ steps.update-dart.outputs.success }}"
          echo "- 종료 코드: ${{ steps.update-dart.outcome }}"
          
          if [ -f "logs/dart_update.log" ]; then
            echo "- 로그 파일 크기: $(du -h logs/dart_update.log | cut -f1)"
            echo "- 마지막 10줄:"
            tail -10 logs/dart_update.log
          fi
          
      - name: Upload execution logs
        if: always()  # 성공/실패와 관계없이 항상 업로드
        uses: actions/upload-artifact@v4
        with:
          name: dart-update-logs-${{ github.run_number }}
          path: |
            logs/
            *.log
            *.txt
            *.json
          retention-days: 30
          compression-level: 6
          
      - name: Upload failure logs (detailed)
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: dart-failure-debug-${{ github.run_number }}
          path: |
            logs/
            *.log
            *.txt
            *.json
            *.xml
            /tmp/*.log
          retention-days: 7
          compression-level: 9
          if-no-files-found: warn
          
      - name: Clean up sensitive data
        if: always()
        run: |
          echo "🧹 민감한 데이터 정리 중..."
          
          # 임시 파일들 삭제
          find . -name "*.tmp" -delete 2>/dev/null || true
          find . -name "*credentials*" -delete 2>/dev/null || true
          find /tmp -name "*dart*" -delete 2>/dev/null || true
          
          # 환경변수 정리
          unset DART_API_KEY
          unset GOOGLE_CREDENTIALS
          unset TELEGRAM_BOT_TOKEN
          
          echo "✅ 정리 완료"
          
      - name: Summary report
        if: always()
        run: |
          echo "## 📋 DART 업데이트 실행 요약" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| 항목 | 값 |" >> $GITHUB_STEP_SUMMARY
          echo "|------|-----|" >> $GITHUB_STEP_SUMMARY
          echo "| 🏢 회사 | $COMPANY_NAME ($COMPANY_CORP_CODE) |" >> $GITHUB_STEP_SUMMARY
          echo "| 📅 실행 시간 | $(date '+%Y-%m-%d %H:%M:%S UTC') |" >> $GITHUB_STEP_SUMMARY
          echo "| 🔄 실행 번호 | ${{ github.run_number }} |" >> $GITHUB_STEP_SUMMARY
          echo "| ✅ 성공 여부 | ${{ steps.update-dart.outputs.success || 'false' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 🔧 디버그 모드 | $DEBUG_MODE |" >> $GITHUB_STEP_SUMMARY
          
          if [ "$CUSTOM_DATE_RANGE" = "true" ]; then
            echo "| 📅 날짜 범위 | 사용자 정의 |" >> $GITHUB_STEP_SUMMARY
            echo "| 📅 시작일 | $MANUAL_START_DATE |" >> $GITHUB_STEP_SUMMARY
            echo "| 📅 종료일 | $MANUAL_END_DATE |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| 📅 날짜 범위 | 기본 (최근 3개월) |" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ steps.update-dart.outcome }}" = "success" ]; then
            echo "### ✅ 업데이트 성공" >> $GITHUB_STEP_SUMMARY
            echo "XBRL Excel 다운로드를 포함한 이원화 시스템으로 DART 데이터 업데이트가 성공적으로 완료되었습니다." >> $GITHUB_STEP_SUMMARY
            if [ "$CUSTOM_DATE_RANGE" = "true" ]; then
              echo "사용자가 지정한 날짜 범위($MANUAL_START_DATE ~ $MANUAL_END_DATE)의 모든 보고서를 처리했습니다." >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "### ❌ 업데이트 실패" >> $GITHUB_STEP_SUMMARY
            echo "DART 데이터 업데이트 중 오류가 발생했습니다. 로그를 확인해주세요." >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📁 아티팩트" >> $GITHUB_STEP_SUMMARY
          echo "- 실행 로그: \`dart-update-logs-${{ github.run_number }}\`" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ steps.update-dart.outcome }}" != "success" ]; then
            echo "- 실패 상세 로그: \`dart-failure-debug-${{ github.run_number }}\`" >> $GITHUB_STEP_SUMMARY
          fi

  notify-completion:
    runs-on: ubuntu-latest
    needs: update-dart-reports
    if: always()
    
    steps:
      - name: Send completion notification
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHANNEL_ID: ${{ secrets.TELEGRAM_CHANNEL_ID }}
          COMPANY_NAME: '현대오토에버'
          COMPANY_CORP_CODE: '307950'
          CUSTOM_DATE_RANGE: ${{ github.event.inputs.custom_date_range || 'false' }}
          MANUAL_START_DATE: ${{ github.event.inputs.start_date }}
          MANUAL_END_DATE: ${{ github.event.inputs.end_date }}
        run: |
          if [ -n "$TELEGRAM_BOT_TOKEN" ] && [ -n "$TELEGRAM_CHANNEL_ID" ]; then
            
            if [ "${{ needs.update-dart-reports.result }}" = "success" ]; then
              STATUS_EMOJI="✅"
              STATUS_TEXT="성공"
            else
              STATUS_EMOJI="❌"
              STATUS_TEXT="실패"
            fi
            
            # 날짜 범위 정보
            if [ "$CUSTOM_DATE_RANGE" = "true" ]; then
              DATE_INFO="📅 처리 범위: $MANUAL_START_DATE ~ $MANUAL_END_DATE (사용자 지정)"
            else
              DATE_INFO="📅 처리 범위: 최근 3개월 (자동)"
            fi
            
            MESSAGE=$(cat << EOF
          🤖 GitHub Actions 알림
          
          📋 작업: DART 업데이트 (XBRL Excel 다운로드)
          🏢 회사: $COMPANY_NAME ($COMPANY_CORP_CODE)
          📅 실행 시간: $(date '+%Y-%m-%d %H:%M:%S UTC')
          ${DATE_INFO}
          ${STATUS_EMOJI} 결과: ${STATUS_TEXT}
          🔗 워크플로: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          
          #DART #현대오토에버 #자동화 #XBRL다운로드
          EOF
          )
            
            curl -s -X POST "https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage" \
              -d "chat_id=${TELEGRAM_CHANNEL_ID}" \
              -d "text=${MESSAGE}" \
              -d "parse_mode=HTML"
              
            echo "📱 텔레그램 알림 전송 완료"
          else
            echo "⚠️ 텔레그램 설정이 없어 알림을 건너뜁니다"
          fi

# 여러 종목을 관리하는 경우 matrix 전략 사용 예시
# jobs:
#   update-dart-reports:
#     strategy:
#       matrix:
#         company:
#           - corp_code: '307950'
#             name: '현대오토에버'
#             spreadsheet_var: 'AUTOEVER_SPREADSHEET_ID'
#           - corp_code: '005930'
#             name: '삼성전자'
#             spreadsheet_var: 'SAMSUNG_SPREADSHEET_ID'
#     env:
#       COMPANY_CORP_CODE: ${{ matrix.company.corp_code }}
#       COMPANY_NAME: ${{ matrix.company.name }}
#       COMPANY_SPREADSHEET_VAR: ${{ matrix.company.spreadsheet_var }}
